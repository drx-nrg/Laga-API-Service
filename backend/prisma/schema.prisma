generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Achievement {
  achievement_id    Int               @id @default(autoincrement())
  title             String            @db.VarChar(200)
  description       String            @db.Text
  created_at        DateTime          @default(now()) @db.DateTime(0)
  updated_at        DateTime          @default(now()) @db.DateTime(0)
  user_achievements UserAchievement[]

  @@map("achievements")
}

model ChallengeSubmission {
  challenge_submission_id Int                    @id @default(autoincrement())
  challenge_id            Int
  submitter_id            Int
  is_validated            Int                    @db.TinyInt
  note                    String                 @db.Text
  created_at              DateTime               @default(now()) @db.DateTime(0)
  updated_at              DateTime               @default(now()) @db.DateTime(0)
  challenges              Challenge              @relation(fields: [challenge_id], references: [challenge_id], onDelete: Cascade, onUpdate: Restrict, map: "challenge_submissions_ibfk_1")
  users                   User                   @relation(fields: [submitter_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "challenge_submissions_ibfk_2")
  submission_attachments  SubmissionAttachment[]

  @@index([challenge_id], map: "challenge_id")
  @@index([submitter_id], map: "submitter_id")
  @@map("challenge_submissions")
}

model Challenge {
  challenge_id          Int                   @id @default(autoincrement())
  classroom_id          Int
  author_id             Int
  title                 String                @db.VarChar(200)
  description           String                @db.Text
  deadline              DateTime              @db.Date
  xp_reward             Int
  score_reward          Int
  special_reward        String                @db.VarChar(200)
  special_reward_value  Int
  created_at            DateTime              @default(now()) @db.DateTime(0)
  updated_at            DateTime              @default(now()) @db.DateTime(0)
  challenge_submissions ChallengeSubmission[]
  classrooms            Classroom             @relation(fields: [classroom_id], references: [classroom_id], onDelete: Restrict, onUpdate: Restrict, map: "challenges_ibfk_1")
  users                 User                  @relation(fields: [author_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "challenges_ibfk_2")

  @@index([author_id], map: "author_id")
  @@index([classroom_id], map: "classroom_id")
  @@map("challenges")
}

model ClassroomTopic {
  classroom_topic_id Int       @id @default(autoincrement())
  classroom_id       Int
  topic_id           Int
  classrooms         Classroom @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade, onUpdate: Restrict, map: "classroom_topics_ibfk_1")
  topics             Topic     @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade, onUpdate: Restrict, map: "classroom_topics_ibfk_2")

  @@index([classroom_id], map: "classroom_id")
  @@index([topic_id], map: "topic_id")
  @@map("classroom_topics")
}

model Classroom {
  classroom_id      Int              @id @default(autoincrement())
  title             String           @db.VarChar(200)
  description       String           @db.Text
  creator_id        Int
  classroom_picture String           @db.VarChar(200)
  max_students      Int
  created_at        DateTime         @default(now()) @db.DateTime(0)
  updated_at        DateTime         @default(now()) @db.DateTime(0)
  challenges        Challenge[]
  classroom_topics  ClassroomTopic[]
  users             User             @relation(fields: [creator_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "classrooms_ibfk_1")
  user_classrooms   UserClassroom[]

  @@index([creator_id], map: "creator_id")
  @@map("classrooms")
}

model Follow {
  follow_id                         Int      @id @default(autoincrement())
  follower_id                       Int
  following_id                      Int
  date                              DateTime @default(now()) @db.Date
  users_follows_follower_idTousers  User     @relation("follows_follower_idTousers", fields: [follower_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "follows_ibfk_1")
  users_follows_following_idTousers User     @relation("follows_following_idTousers", fields: [following_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "follows_ibfk_2")

  @@index([follower_id], map: "follower_id")
  @@index([following_id], map: "following_id")
  @@map("follows")
}

model SubmissionAttachment {
  submission_attachment_id Int                 @id @default(autoincrement())
  challenge_submission_id  Int
  file_name                String              @db.VarChar(200)
  file_type                String              @db.VarChar(20)
  file_size                Int
  file_path                String              @db.VarChar(100)
  created_at               DateTime            @default(now()) @db.DateTime(0)
  updated_at               DateTime            @default(now()) @db.DateTime(0)
  challenge_submissions    ChallengeSubmission @relation(fields: [challenge_submission_id], references: [challenge_submission_id], onDelete: Cascade, onUpdate: Restrict, map: "submission_attachments_ibfk_1")

  @@index([challenge_submission_id], map: "challenge_submission_id")
  @@map("submission_attachment")
}

model Topic {
  topic_id         Int              @id @default(autoincrement())
  name             String           @db.VarChar(100)
  description      String           @db.Text
  topic_picture    String           @db.VarChar(200)
  created_at       DateTime         @default(now()) @db.DateTime(0)
  updated_at       DateTime         @default(now()) @db.DateTime(0)
  classroom_topics ClassroomTopic[]

  @@map("topics")
}

model UserAchievement {
  user_achievement_id Int         @id @default(autoincrement())
  user_id             Int
  achievement_id      Int
  date                DateTime    @default(now()) @db.Date
  users               User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "user_achievements_ibfk_1")
  achievements        Achievement @relation(fields: [achievement_id], references: [achievement_id], onDelete: Cascade, onUpdate: Restrict, map: "user_achievements_ibfk_2")

  @@index([achievement_id], map: "achievement_id")
  @@index([user_id], map: "user_id")
  @@map("user_achievements")
}

model UserClassroom {
  user_classroom_id Int                  @id @default(autoincrement())
  user_id           Int
  classroom_id      Int
  role              user_classrooms_role @default(student)
  created_at        DateTime             @default(now()) @db.DateTime(0)
  updated_at        DateTime             @default(now()) @db.DateTime(0)
  users             User                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "user_classrooms_ibfk_1")
  classrooms        Classroom            @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade, onUpdate: Restrict, map: "user_classrooms_ibfk_2")

  @@index([classroom_id], map: "classroom_id")
  @@index([user_id], map: "user_id")
  @@map("user_classrooms")
}

model User {
  user_id                             Int                   @id @default(autoincrement())
  username                            String                @unique(map: "username") @db.VarChar(50)
  password                            String?               @db.VarChar(50)
  email                               String                @unique(map: "email") @db.VarChar(50)
  firstname                           String                @db.VarChar(50)
  lastname                            String                @db.VarChar(50)
  bio                                 String?               @db.Text
  profile_picture                     String?               @db.VarChar(255)
  total_xp                            Int                   @default(0)
  total_score                         Int                   @default(0)
  created_at                          DateTime              @default(now()) @db.DateTime(0)
  updated_at                          DateTime              @default(now()) @db.DateTime(0)
  challenge_submissions               ChallengeSubmission[]
  challenges                          Challenge[]
  classrooms                          Classroom[]
  follows_follows_follower_idTousers  Follow[]              @relation("follows_follower_idTousers")
  follows_follows_following_idTousers Follow[]              @relation("follows_following_idTousers")
  user_achievements                   UserAchievement[]
  user_classrooms                     UserClassroom[]

  @@map("users")
}

model RefreshToken {
  token_id   Int      @id @default(autoincrement())
  user_id    Int
  token      String   @db.VarChar(200)
  expires_at DateTime @db.DateTime(0)
  created_at       DateTime         @default(now()) @db.DateTime(0)

  @@map("refresh_tokens")
}

enum user_classrooms_role {
  teacher
  student
}
